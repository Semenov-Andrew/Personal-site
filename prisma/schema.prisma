// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Meme {
  id            String        @id @default(cuid())
  imageSrc      String
  title         String?
  likesCount    Int           @default(0)
  commentsCount Int           @default(0)
  viewsCount    Int           @default(0)
  createdAt     DateTime      @default(now())
  likes         MemeLike[]
  comments      MemeComment[]

  @@map("memes")
}

model MemeLike {
  userId  String
  memeId  String
  likedAt DateTime @default(now())

  meme Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, memeId])
  @@index([memeId])
  @@index([userId])
}

model MemeComment {
  id              String   @id @default(cuid())
  commentatorId   String
  image           String
  commentatorName String
  memeId          String
  createdAt       DateTime @default(now())
  text            String   @db.Text

  meme Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)
  user User @relation(fields: [commentatorId], references: [id], onDelete: Cascade)

  @@index([memeId])
  @@index([commentatorId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(user)
  accounts      Account[]
  sessions      Session[]
  memesLikes    MemeLike[]
  memesComments MemeComment[]
}

enum UserRole {
  admin
  user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
